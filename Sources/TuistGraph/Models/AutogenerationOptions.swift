/// Contains options for autogenerated targets
public enum AutogenerationOptions: Codable, Hashable {
    public enum CodeCoverageMode: Codable, Hashable {
        case all
        case relevant
        case targets([TargetReference])
        case disabled
    }

    /// Tuist will not automatically generate any schemes
    case disabled
    /// Tuist will generate schemes with the associated testing options
    case enabled(codeCoverageMode: CodeCoverageMode = .disabled, testingOptions: TestingOptions = [])

    public var codeCoverageMode: CodeCoverageMode {
        switch self {
        case let .enabled(codeCoverageMode, _):
            return codeCoverageMode
        case .disabled:
            return .disabled
        }
    }

    public var testingOptions: TestingOptions {
        switch self {
        case let .enabled(_, testingOptions):
            return testingOptions
        case .disabled:
            return []
        }
    }
}
