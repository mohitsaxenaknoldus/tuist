import Foundation
import TSCBasic
import TuistCore
import TuistGraph
import TuistGraphTesting
import XCTest

@testable import TuistGenerator
@testable import TuistSupport
@testable import TuistSupportTesting

final class AutogeneratedSchemesProjectMapperTests: TuistUnitTestCase {
    var subject: AutogeneratedSchemesProjectMapper!

    override func setUp() {
        super.setUp()
        subject = AutogeneratedSchemesProjectMapper()
    }

    override func tearDown() {
        subject = nil
        super.tearDown()
    }

    func test_grouping_singeleScheme() throws {
        // Given
        let targetB = Target.test(name: "B", product: .app)
        let targetBTests = Target.test(
            name: "BTests",
            product: .unitTests,
            dependencies: [
                .target(name: "B"),
                .target(name: "A"),
            ]
        )
        let targetBUITests = Target.test(
            name: "BUITests",
            product: .uiTests,
            dependencies: [.target(name: "B")]
        )
        let targetBIntegrationTests = Target.test(
            name: "BIntegrationTests",
            product: .unitTests,
            dependencies: [.target(name: "B")]
        )
        let targetBSnapshotTests = Target.test(
            name: "BSnapshotTests",
            product: .unitTests,
            dependencies: [
                .target(name: "B"),
                .target(name: "A"),
            ]
        )
        let targetA = Target.test(
            name: "A",
            product: .framework,
            dependencies: [
                .target(name: "B"),
            ]
        )
        let targetADemo = Target.test(
            name: "ADemo",
            product: .app,
            dependencies: [
                .target(name: "B"),
            ]
        )
        let targetATests = Target.test(
            name: "ATests",
            product: .unitTests,
            dependencies: [.target(name: "A")]
        )
        let projectPath = try temporaryPath()
        let project = Project.test(
            path: projectPath,
            options: [
                .automaticSchemesOptions(.enabled(
                    targetSchemesGrouping: .singleScheme,
                    codeCoverageEnabled: false,
                    testingOptions: []
                )),
            ],
            targets: [
                targetA,
                targetADemo,
                targetATests,
                targetB,
                targetBTests,
                targetBUITests,
                targetBIntegrationTests,
                targetBSnapshotTests,
            ]
        )

        // When
        let (got, sideEffects) = try subject.map(project: project)

        // Then
        XCTAssertEmpty(sideEffects)

        let expected = [
            makeScheme(
                name: "Project",
                buildTargetNames: ["A", "ADemo", "ATests", "B", "BIntegrationTests", "BSnapshotTests", "BTests", "BUITests"],
                testTargetNames: ["ATests", "BIntegrationTests", "BSnapshotTests", "BTests", "BUITests"],
                runTargetName: nil,
                projectPath: projectPath
            ),
        ]

        XCTAssertEqual(
            got.schemes,
            expected
        )
    }

    func test_grouping_byNameSuffix() throws {
        // Given
        let targetB = Target.test(name: "B", product: .app)
        let targetBTests = Target.test(
            name: "BTests",
            product: .unitTests,
            dependencies: [
                .target(name: "B"),
                .target(name: "A"),
            ]
        )
        let targetBUITests = Target.test(
            name: "BUITests",
            product: .uiTests,
            dependencies: [.target(name: "B")]
        )
        let targetBIntegrationTests = Target.test(
            name: "BIntegrationTests",
            product: .unitTests,
            dependencies: [.target(name: "B")]
        )
        let targetBSnapshotTests = Target.test(
            name: "BSnapshotTests",
            product: .unitTests,
            dependencies: [
                .target(name: "B"),
                .target(name: "A"),
            ]
        )
        let targetA = Target.test(
            name: "A",
            product: .framework,
            dependencies: [
                .target(name: "B"),
            ]
        )
        let targetADemo = Target.test(
            name: "ADemo",
            product: .app,
            dependencies: [
                .target(name: "B"),
            ]
        )
        let targetATests = Target.test(
            name: "ATests",
            product: .unitTests,
            dependencies: [.target(name: "A")]
        )
        let projectPath = try temporaryPath()
        let project = Project.test(
            path: projectPath,
            options: [
                .automaticSchemesOptions(.enabled(
                    targetSchemesGrouping: .byNameSuffix(
                        build: [],
                        test: ["Tests", "UITests", "IntegrationTests", "SnapshotTests"],
                        run: ["Demo"]
                    ),
                    codeCoverageEnabled: false,
                    testingOptions: []
                )),
            ],
            targets: [
                targetA,
                targetADemo,
                targetATests,
                targetB,
                targetBTests,
                targetBUITests,
                targetBIntegrationTests,
                targetBSnapshotTests,
            ]
        )

        // When
        let (got, sideEffects) = try subject.map(project: project)

        // Then
        XCTAssertEmpty(sideEffects)

        let expected = [
            makeScheme(
                name: "A",
                buildTargetNames: ["A", "ADemo", "ATests"],
                testTargetNames: ["ATests"],
                runTargetName: "ADemo",
                projectPath: projectPath
            ),
            makeScheme(
                name: "B",
                buildTargetNames: ["B", "BIntegrationTests", "BSnapshotTests", "BTests", "BUITests"],
                testTargetNames: ["BIntegrationTests", "BSnapshotTests", "BTests", "BUITests"],
                runTargetName: "B",
                projectPath: projectPath
            ),
        ]

        XCTAssertEqual(
            got.schemes,
            expected
        )
    }

    func test_grouping_notGrouped() throws {
        // Given
        let targetB = Target.test(name: "B", product: .app)
        let targetBTests = Target.test(
            name: "BTests",
            product: .unitTests,
            dependencies: [
                .target(name: "B"),
                .target(name: "A"),
            ]
        )
        let targetBUITests = Target.test(
            name: "BUITests",
            product: .uiTests,
            dependencies: [.target(name: "B")]
        )
        let targetBIntegrationTests = Target.test(
            name: "BIntegrationTests",
            product: .unitTests,
            dependencies: [.target(name: "B")]
        )
        let targetBSnapshotTests = Target.test(
            name: "BSnapshotTests",
            product: .unitTests,
            dependencies: [
                .target(name: "B"),
                .target(name: "A"),
            ]
        )
        let targetA = Target.test(
            name: "A",
            product: .framework,
            dependencies: [
                .target(name: "B"),
            ]
        )
        let targetADemo = Target.test(
            name: "ADemo",
            product: .app,
            dependencies: [
                .target(name: "B"),
            ]
        )
        let targetATests = Target.test(
            name: "ATests",
            product: .unitTests,
            dependencies: [.target(name: "A")]
        )
        let projectPath = try temporaryPath()
        let project = Project.test(
            path: projectPath,
            options: [
                .automaticSchemesOptions(.enabled(
                    targetSchemesGrouping: .notGrouped,
                    codeCoverageEnabled: false,
                    testingOptions: []
                )),
            ],
            targets: [
                targetA,
                targetADemo,
                targetATests,
                targetB,
                targetBTests,
                targetBUITests,
                targetBIntegrationTests,
                targetBSnapshotTests,
            ]
        )

        // When
        let (got, sideEffects) = try subject.map(project: project)

        // Then
        XCTAssertEmpty(sideEffects)

        let expected = [
            makeScheme(
                name: "A",
                buildTargetNames: ["A"],
                testTargetNames: [],
                runTargetName: nil,
                projectPath: projectPath
            ),
            makeScheme(
                name: "ADemo",
                buildTargetNames: ["ADemo"],
                testTargetNames: [],
                runTargetName: "ADemo",
                projectPath: projectPath
            ),
            makeScheme(
                name: "ATests",
                buildTargetNames: ["ATests"],
                testTargetNames: ["ATests"],
                runTargetName: nil,
                projectPath: projectPath
            ),
            makeScheme(
                name: "B",
                buildTargetNames: ["B"],
                testTargetNames: [],
                runTargetName: "B",
                projectPath: projectPath
            ),
            makeScheme(
                name: "BIntegrationTests",
                buildTargetNames: ["BIntegrationTests"],
                testTargetNames: ["BIntegrationTests"],
                runTargetName: nil,
                projectPath: projectPath
            ),
            makeScheme(
                name: "BSnapshotTests",
                buildTargetNames: ["BSnapshotTests"],
                testTargetNames: ["BSnapshotTests"],
                runTargetName: nil,
                projectPath: projectPath
            ),
            makeScheme(
                name: "BTests",
                buildTargetNames: ["BTests"],
                testTargetNames: ["BTests"],
                runTargetName: nil,
                projectPath: projectPath
            ),
            makeScheme(
                name: "BUITests",
                buildTargetNames: ["BUITests"],
                testTargetNames: ["BUITests"],
                runTargetName: nil,
                projectPath: projectPath
            ),
        ]

        XCTAssertEqual(
            got.schemes,
            expected
        )
    }

//    func test_map_doesnt_override_user_schemes() throws {
//        // Given
//        let targetA = Target.test(name: "A")
//        let aScheme = Scheme.test(
//            name: "A",
//            shared: true,
//            buildAction: nil,
//            testAction: nil,
//            runAction: nil,
//            archiveAction: nil,
//            profileAction: nil,
//            analyzeAction: nil
//        )
//        let project = Project.test(
//            targets: [targetA],
//            schemes: [aScheme]
//        )
//
//        // When
//        let (got, sideEffects) = try subject.map(project: project)
//
//        // Then
//        XCTAssertEmpty(sideEffects)
//        XCTAssertEqual(got.schemes.count, 1)
//
//        // Then: A
//        let gotAScheme = got.schemes.first!
//        XCTAssertNil(gotAScheme.buildAction)
//    }

//    func test_map_appExtensions() throws {
//        // Given
//        let path = AbsolutePath("/test")
//        let app = Target.test(
//            name: "App",
//            product: .app,
//            dependencies: [
//                .target(name: "AppExtension"),
//                .target(name: "MessageExtension"),
//            ]
//        )
//        let appExtension = Target.test(name: "AppExtension", product: .appExtension)
//        let messageExtension = Target.test(name: "MessageExtension", product: .messagesExtension)
//
//        let project = Project.test(path: path, targets: [app, appExtension, messageExtension])
//
//        // When
//        let (got, _) = try subject.map(project: project)
//
//        // Then
//        let buildActions = got.schemes.map(\.buildAction?.targets)
//        XCTAssertEqual(buildActions, [
//            [TargetReference(projectPath: path, name: "App")],
//            [TargetReference(projectPath: path, name: "AppExtension"), TargetReference(projectPath: path, name: "App")],
//            [TargetReference(projectPath: path, name: "MessageExtension"), TargetReference(projectPath: path, name: "App")],
//        ])
//
//        let runActions = got.schemes.map(\.runAction?.executable)
//        XCTAssertEqual(runActions, [
//            TargetReference(projectPath: path, name: "App"),
//            TargetReference(projectPath: path, name: "App"), // Extensions set their host app as the runnable target
//            TargetReference(projectPath: path, name: "App"), // Extensions set their host app as the runnable target
//        ])
//    }
//
//    func test_map_watch2() throws {
//        // Given
//        let path = AbsolutePath("/test")
//        let app = Target.test(
//            name: "App",
//            product: .app,
//            dependencies: [
//                .target(name: "WatchApp"),
//            ]
//        )
//        let watchApp = Target.test(name: "WatchApp", product: .watch2App, dependencies: [.target(name: "WatchExtension")])
//        let watchAppExtension = Target.test(name: "WatchExtension", product: .watch2Extension)
//
//        let project = Project.test(path: path, targets: [app, watchApp, watchAppExtension])
//
//        // When
//        let (got, _) = try subject.map(project: project)
//
//        // Then
//        let buildActions = got.schemes.map(\.buildAction?.targets)
//        XCTAssertEqual(buildActions, [
//            [TargetReference(projectPath: path, name: "App")],
//            [TargetReference(projectPath: path, name: "WatchApp")],
//            [TargetReference(projectPath: path, name: "WatchExtension")],
//        ])
//
//        let runActions = got.schemes.map(\.runAction?.executable)
//        XCTAssertEqual(runActions, [
//            TargetReference(projectPath: path, name: "App"),
//            TargetReference(projectPath: path, name: "WatchApp"),
//            TargetReference(projectPath: path, name: "WatchApp"),
//        ])
//    }
//
//    func test_map_enables_test_coverage_on_generated_schemes() throws {
//        // Given
//        subject = AutogeneratedSchemesProjectMapper()
//
//        let targetA = Target.test(
//            name: "A",
//            dependencies: [
//                .target(name: "B"),
//            ]
//        )
//        let targetATests = Target.test(
//            name: "ATests",
//            product: .unitTests,
//            dependencies: [.target(name: "A")]
//        )
//        let projectPath = try temporaryPath()
//        let project = Project.test(
//            path: projectPath,
//            options: [
//                .automaticSchemesOptions(
//                    .enabled(targetSchemesGrouping: .notGrouped, codeCoverageEnabled: true, testingOptions: [])
//                ),
//            ],
//            targets: [
//                targetA,
//                targetATests,
//            ]
//        )
//
//        // When
//        let (got, sideEffects) = try subject.map(project: project)
//
//        // Then
//        XCTAssertEmpty(sideEffects)
//        XCTAssertEqual(got.schemes.count, 2)
//
//        // Then: A Tests
//        let gotAScheme = got.schemes.first!
//        XCTAssertTrue(gotAScheme.testAction?.coverage != nil)
//        // Code coverage targets should be empty in order to gather coverage from all the targets
//        XCTAssertEqual(gotAScheme.testAction?.codeCoverageTargets.count, 0)
//    }
//
//    func test_map_onlySetsArgumentsWhenAvailableInTarget() throws {
//        // Given
//        subject = AutogeneratedSchemesProjectMapper()
//
//        let targetWithoutArguments = Target.test(
//            name: "ATargetWithoutArguments",
//            product: .framework,
//            environment: [:],
//            launchArguments: []
//        )
//        let targetWithArguments = Target.test(
//            name: "ATargetWithArguments",
//            product: .framework,
//            environment: [:],
//            launchArguments: [.init(name: "--run-argument", isEnabled: true)]
//        )
//        let targetWithEnvironment = Target.test(
//            name: "ATargetWithEnvironment",
//            product: .framework,
//            environment: ["A": "B"],
//            launchArguments: []
//        )
//        let projectPath = try temporaryPath()
//        let project = Project.test(
//            path: projectPath,
//            targets: [
//                targetWithoutArguments,
//                targetWithArguments,
//                targetWithEnvironment,
//            ]
//        )
//
//        // When
//        let (got, sideEffects) = try subject.map(project: project)
//
//        // Then
//        XCTAssertEmpty(sideEffects)
//        let runActions = got.schemes.compactMap(\.runAction)
//        let arguments = runActions.map(\.arguments)
//        XCTAssertEqual(arguments, [
//            nil,
//            Arguments(environment: [:], launchArguments: [.init(name: "--run-argument", isEnabled: true)]),
//            Arguments(environment: ["A": "B"], launchArguments: []),
//        ])
//    }

    // MARK: - Helpers

    private func makeScheme(
        name: String,
        buildTargetNames: [String],
        testTargetNames: [String],
        runTargetName: String?,
        projectPath: AbsolutePath
    ) -> TuistGraph.Scheme {
        Scheme(
            name: name,
            shared: true,
            buildAction: BuildAction(
                targets: buildTargetNames.map { TargetReference(projectPath: projectPath, name: $0) }
            ),
            testAction: TestAction.test(
                targets: testTargetNames.map { TestableTarget(target: TargetReference(projectPath: projectPath, name: $0)) },
                arguments: nil
            ),
            runAction: runTargetName.map {
                RunAction.test(
                    executable: TargetReference(projectPath: projectPath, name: $0),
                    arguments: nil
                )
            }
        )
    }
}
